/*
 * Author: Zhiyuan Lin
 *
 */

module AES where

type AES128 = 4
type AES192 = 6
type AES256 = 8

type NColumns = AES128
type NBlocks = 4
type NRounds = NColumns + 6

type KeySize = (NColumns * 32)

type Field = [8] // The Galois field GF(2^^n)
type State = [4][NBlocks]Field
type RoundKey = State
type KeySchedule = (RoundKey, [NRounds - 1]RoundKey, RoundKey)

fieldSum : {n} (fin n) => [n]Field -> Field
fieldSum xs = ys ! 0
            where ys = [0] # [ x ^ y | x <- xs
                                      | y <- ys]

irreducible = <| x^^8 + x^^4 + x^^3 + x + 1 |>

fieldMul : (Field, Field) -> Field
fieldMul (x, y) = pmod (pmult x y) irreducible

fieldPow : (Field, [8]) -> Field
fieldPow (n, k) = if k == 0 then 1
                else if odd k then fieldMul (n, fieldPow(n, k-1))                
                else fieldSquare(fieldPow(n, k/2)) 

odd : {a, b} (fin a) => [a]b -> b
odd x = x ! 0

fieldSquare : Field -> Field
fieldSquare x = fieldMul (x, x)

// computing multiplicative inverse of the field
fieldInverse : Field -> Field
fieldInverse x = if x == 0 then 0
                 else fieldPow (x, 254) // does not seem to be the most efficient way

// property: prove that pow and inverse is correct


formByte : Field -> Field
formByte b = b ^ (b >>> 4) ^ (b >>> 5) ^ (b >>> 6) ^ (b >>> 7) ^ c
           where c = 0x63

// subByte includes 2 operations: (multiplicative) inverse and formByte
subByte : Field -> Field
subByte byte = formByte ( fieldInverse byte)

// subBytes simply apply subByte to each byte in the block
subBytes : State -> State
subBytes s = [ [ subByte b | b <- r ] | r <- s ]
// for each row in state, and each byte in row, subByte b


subByteTable : [256] Field
subByteTable = [
     0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67,
     0x2b, 0xfe, 0xd7, 0xab, 0x76, 0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59,
     0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0, 0xb7,
     0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1,
     0x71, 0xd8, 0x31, 0x15, 0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05,
     0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75, 0x09, 0x83,
     0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29,
     0xe3, 0x2f, 0x84, 0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b,
     0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf, 0xd0, 0xef, 0xaa,
     0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c,
     0x9f, 0xa8, 0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc,
     0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2, 0xcd, 0x0c, 0x13, 0xec,
     0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19,
     0x73, 0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee,
     0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb, 0xe0, 0x32, 0x3a, 0x0a, 0x49,
     0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
     0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4,
     0xea, 0x65, 0x7a, 0xae, 0x08, 0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6,
     0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a, 0x70,
     0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9,
     0x86, 0xc1, 0x1d, 0x9e, 0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e,
     0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf, 0x8c, 0xa1,
     0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0,
     0x54, 0xbb, 0x16]

// a more efficient version of subByte, also used for verification
subByte' : Field -> Field
subByte' x = subByteTable @ x

subBytes' : State -> State
subBytes' s = [ [ subByte b | b <- r ] | r <- s ]

// shiftRows shifts the last three rows of the matrix to the left by 1, 2, 3.
shiftRows : State -> State
shiftRows s = [ r <<< shift | r <- s
                            | shift <- [0 .. 3] ]

// dot-product of 2 vectors over GF(2^8)
dotProduct : {n} (fin n) => ([n]Field, [n]Field) -> Field
dotProduct (xs, ys) = fieldSum [ fieldMul (x, y) | x <- xs
                                                 | y <- ys ]

matrixProduct : {n, m, k} (fin m) => ([n][m]Field, [m][k]Field) -> [n][k]Field
matrixProduct (x, y) = [ rowProduct (r, y) | r <- x ]
                  where
                  rowProduct (a, bMatrix) = [ dotProduct (a, b) | b <- transpose bMatrix ]

mixColumns : State -> State
mixColumns s = matrixProduct (m, s)
           where m = [ [2, 3, 1, 1],
                       [1, 2, 3, 1],
                       [1, 1, 2, 3],
                       [3, 1, 1, 2] ]

rCon : [8] -> [4]Field
rCon i = [(fieldPow (<| x |>, i-1)), 0, 0, 0]

rCon' : [8] -> [4]Field
rCon' i = [
  [0x01, 0, 0, 0],
  [0x02, 0, 0, 0],
  [0x04, 0, 0, 0],
  [0x08, 0, 0, 0],
  [0x10, 0, 0, 0],
  [0x20, 0, 0, 0],
  [0x40, 0, 0, 0],
  [0x80, 0, 0, 0],
  [0x1b, 0, 0, 0],
  [0x36, 0, 0, 0] ] @ (i-1)

subWord : [4]Field -> [4]Field
subWord bs = [subByte' b | b <- bs]

// rotate the word 1 pace to the left
rotateWord : [4]Field -> [4]Field
rotateWord xs = xs <<< 1

nextWord : ([8], [4][8], [4][8]) -> [4][8]
nextWord (i, prev, old) = old ^ mask
         where mask = if i % `NColumns == 0 // note the use of type variable
                      then subWord ( rotateWord (prev)) ^ rCon' (i / `NColumns)
                      else if (`NColumns > 6) && (i % `NColumns == 4)
                           then subWord (prev)
                           else prev

expandForever : [NColumns][4][8] -> [inf]RoundKey
expandForever seed = [ transpose g | g <- groupBy`{4} keyWS ]
              where keyWS = seed # [ nextWord (i, prev, old)
                                   | i <- [`NColumns ...]
                                   | prev <- drop`{NColumns-1} keyWS
                                   | old <- keyWS
                                   ]

expandKey : [KeySize] -> KeySchedule
expandKey key = (keys @ 0, keys @@ [1 .. (NRounds - 1)], keys @ `NRounds)
              where seed : [NColumns][4][8]
                    seed = split (split key)
                    keys = expandForever seed

fromKeySchedule : KeySchedule -> [NRounds + 1][4][32]
fromKeySchedule(f, ms, l) = [
                     formKeyWords (transpose k)
                   | k <- [f] # ms # [l]
                   ]
                   where formKeyWords matrix = [ join r | r <- matrix ]

addRoundKey : (RoundKey, State) -> State
addRoundKey (roundKey, state) = roundKey ^ state

// each AES round applies subBytes, shiftRows, mixColumns, and addRoundKey in order
singleRound : (RoundKey, State) -> State
singleRound (roundKey, state) =
            addRoundKey (roundKey, mixColumns (shiftRows (subBytes state)))

// mixColumns is omitted in the last round
finalRound : (RoundKey, State) -> State
finalRound (roundKey, state) =
          addRoundKey (roundKey, shiftRows (subBytes state))

toState : [128] -> State
toState text = transpose (split (split text))

fromState : State -> [128]
fromState state = join (join (transpose state))

last x = x ! 0

encrypt : ([128], [KeySize]) -> [128]
encrypt (plainText, key) = fromState (finalRound (lastKey, last (firstStates)))
        where (firstKey, middleKeys, lastKey) = expandKey key
              initState = addRoundKey (firstKey, toState plainText)
              firstStates = [initState] # [singleRound (roundKey, state)
                                          | roundKey <- middleKeys
                                          | state <- firstStates]

// Decryption

reverseFormByte : Field -> Field
reverseFormByte b = (b >>> 2) ^ (b >>> 5) ^ (b >>> 7) ^ d
                 where d = 0x05

reverseSubBytes : State -> State
reverseSubBytes state = [
                [ reverseSubByte b | b <- r ]
                | r <- state
                ] 
                where
                reverseSubByte : Field -> Field
                reverseSubByte b = fieldInverse (reverseFormByte b)

//reverse of shiftRows
reverseShiftRows : State -> State
reverseShiftRows state = [
                 r >>> shift
                 | r <- state
                 | shift <- [0..3]
                 ]

//reverse mix columns
reverseMixColumns : State -> State
reverseMixColumns state = matrixProduct (m, state)
                  where m = [
                            [0x0e, 0x0b, 0x0d, 0x09],
                            [0x09, 0x0e, 0x0b, 0x0d],
                            [0x0d, 0x09, 0x0e, 0x0b],
                            [0x0b, 0x0d, 0x09, 0x0e]]

reverseSingleRound : (RoundKey, State) -> State
reverseSingleRound (roundKey, state) =
                   reverseMixColumns
                        (addRoundKey (roundKey,
                                     reverseSubBytes (reverseShiftRows state)))

reverseFinalRound : (RoundKey, State) -> State
reverseFinalRound (roundKey, state) =
                  addRoundKey (roundKey, reverseSubBytes (reverseShiftRows state))

decrypt : ([128], [KeySize]) -> [128]
decrypt (cipher, key) = fromState (reverseFinalRound (firstKey, last firstStates))
        where (firstKey, middleKeys, lastKey) = expandKey key
              initState = addRoundKey (lastKey, toState cipher)
              firstStates = [initState] # [ reverseSingleRound (roundKey, state)
                                          | roundKey <- reverse middleKeys
                                          | state <- firstStates
                                          ]
                                          